/**
 * The argument passed into the awaitCatcher
 */
declare type PromiseArg<T> = T | Promise<T> | ReturnType<() => () => Promise<T>>;
/**
 * The promise returned from awaitCatcher contianing an array of [data | undefined, error | undefined]
 */
declare type PromiseReturn<T> = Promise<[T | undefined, Error | undefined]>;
declare type options = {
    getByKeys?: String[];
    getByKeysAndInvoke?: String[];
};
/**
 * Helper for async/await error handling. Resolves a promise and passes an error if one exists. Promises of any type with any return value are allowed.
 * @param promise 1) a promise, or
 *                2) a function that returns a promise, or
 *                3) an object that contains either a promise or a function that returns a promise, or
 *                4) an array or primitive values (string/number)
 *
 * @param options [options]
 */
export declare function awaitCatcher<T>(promise: PromiseArg<T>, options?: options): PromiseReturn<T>;
/**
 * awaitCatcherAsync is a wrapper for awaitCatcher that accepts a callback instead of aysnc/await
 * @param promise
 * @param cb
 * @param options
 */
export declare function awaitCatcherAsync<T>(promise: PromiseArg<T>, cb: Function, options?: options): PromiseReturn<T>;
declare const _default: {
    awaitCatcher: typeof awaitCatcher;
    awaitCatcherAsync: typeof awaitCatcherAsync;
};
export default _default;
/**
 * test...
 * uncomment one at a time...
 */
